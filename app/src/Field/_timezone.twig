{#=== OPTIONS ========================================================================================================#}

{% set option = {
    class:     field.class|default(''),
    label:     field.label|default(''),
    info:      field.info|default(''),
    required:  field.required|default(false)
} %}

{#=== INIT ===========================================================================================================#}


{% set values = timezones %}


{# get the current selection. Either a single value, or an array. #}
{% set selection = context.content.get(contentkey)|default(null) %}
{% if selection is not iterable %}
    {% set selection = [ selection ] %}
{% endif %}

{# If the current selection contains an existing id, we must use _only_ the id, and not accept a fallback. #}
{% if selection|first in values|keys %}
    {% set onlyids = true %}
{% else %}
    {% set onlyids = false %}
{% endif %}

{% set attr_select = {
    class:     option.class,
    id:        key,
    required:  option.required,
    name:      name,
} %}

{# If the field has autocomplete, we need to set our own style, and remove the class attribute. #}
{% if field.autocomplete|default(false) %}
    {% set attr_select = attr_select|merge({'class': ''}) %}
    {% set attr_select = attr_select|merge({'style': 'width: 100%;'}) %}
{% endif %}

{#=== FIELDSET =======================================================================================================#}

<fieldset class="multiselect">

    <label class="col-sm-3 control-label">{{ (option.info) ? macro.infopop(labelkey, option.info) : labelkey }}</label>
    <div class="col-sm-9">
        <select{{ macro.attr(attr_select) }}>
            {% for value in values %}

                {% set is_array = (value is iterable and (value | length) > 1) %}
                {% set attr_opt = {
                    value:     value,
                    selected:  value in selection,
                } %}

                <option{{ macro.attr(attr_opt) }}>{{ is_array ? value[0:]|join(' / ') : value }}</option>
            {% endfor %}
        </select>
    </div>

    {% if field.autocomplete|default(false) %}
    <script>
        $(function() {
            $('#{{ key }}').select2({
                placeholder: "{{ __('(none)') }}",
                allowClear: true
            });
        });
    </script>
    {% endif %}

</fieldset>
